// Code generated by girgen. DO NOT EDIT.

package adw

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/gtk/v4"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: libadwaita-1
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <adwaita.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.adw_clamp_layout_get_type()), F: marshalClampLayouter},
	})
}

type ClampLayout struct {
	gtk.LayoutManager

	gtk.Orientable
	*externglib.Object
}

func wrapClampLayout(obj *externglib.Object) *ClampLayout {
	return &ClampLayout{
		LayoutManager: gtk.LayoutManager{
			Object: obj,
		},
		Orientable: gtk.Orientable{
			Object: obj,
		},
		Object: obj,
	}
}

func marshalClampLayouter(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapClampLayout(obj), nil
}

// NewClampLayout creates a new ClampLayout.
func NewClampLayout() *ClampLayout {
	var _cret *C.GtkLayoutManager // in

	_cret = C.adw_clamp_layout_new()

	var _clampLayout *ClampLayout // out

	_clampLayout = wrapClampLayout(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _clampLayout
}

// MaximumSize gets the maximum size to allocate to the contained child. It is
// the width if self is horizontal, or the height if it is vertical.
func (self *ClampLayout) MaximumSize() int {
	var _arg0 *C.AdwClampLayout // out
	var _cret C.int             // in

	_arg0 = (*C.AdwClampLayout)(unsafe.Pointer(self.Native()))

	_cret = C.adw_clamp_layout_get_maximum_size(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// TighteningThreshold gets the size starting from which the clamp will tighten
// its grip on the child.
func (self *ClampLayout) TighteningThreshold() int {
	var _arg0 *C.AdwClampLayout // out
	var _cret C.int             // in

	_arg0 = (*C.AdwClampLayout)(unsafe.Pointer(self.Native()))

	_cret = C.adw_clamp_layout_get_tightening_threshold(_arg0)

	var _gint int // out

	_gint = int(_cret)

	return _gint
}

// SetMaximumSize sets the maximum size to allocate to the contained child. It
// is the width if self is horizontal, or the height if it is vertical.
func (self *ClampLayout) SetMaximumSize(maximumSize int) {
	var _arg0 *C.AdwClampLayout // out
	var _arg1 C.int             // out

	_arg0 = (*C.AdwClampLayout)(unsafe.Pointer(self.Native()))
	_arg1 = C.int(maximumSize)

	C.adw_clamp_layout_set_maximum_size(_arg0, _arg1)
}

// SetTighteningThreshold sets the size starting from which the clamp will
// tighten its grip on the child.
func (self *ClampLayout) SetTighteningThreshold(tighteningThreshold int) {
	var _arg0 *C.AdwClampLayout // out
	var _arg1 C.int             // out

	_arg0 = (*C.AdwClampLayout)(unsafe.Pointer(self.Native()))
	_arg1 = C.int(tighteningThreshold)

	C.adw_clamp_layout_set_tightening_threshold(_arg0, _arg1)
}
