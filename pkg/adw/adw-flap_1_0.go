// Code generated by girgen. DO NOT EDIT.

package adw

import (
	"fmt"
	"unsafe"

	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <adwaita.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeFlapFoldPolicy     = coreglib.Type(C.adw_flap_fold_policy_get_type())
	GTypeFlapTransitionType = coreglib.Type(C.adw_flap_transition_type_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeFlapFoldPolicy, F: marshalFlapFoldPolicy},
		coreglib.TypeMarshaler{T: GTypeFlapTransitionType, F: marshalFlapTransitionType},
	})
}

// FlapFoldPolicy describes the possible folding behavior of a flap widget.
type FlapFoldPolicy C.gint

const (
	// FlapFoldPolicyNever: disable folding, the flap cannot reach narrow sizes.
	FlapFoldPolicyNever FlapFoldPolicy = iota
	// FlapFoldPolicyAlways: keep the flap always folded.
	FlapFoldPolicyAlways
	// FlapFoldPolicyAuto: fold and unfold the flap based on available space.
	FlapFoldPolicyAuto
)

func marshalFlapFoldPolicy(p uintptr) (interface{}, error) {
	return FlapFoldPolicy(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for FlapFoldPolicy.
func (f FlapFoldPolicy) String() string {
	switch f {
	case FlapFoldPolicyNever:
		return "Never"
	case FlapFoldPolicyAlways:
		return "Always"
	case FlapFoldPolicyAuto:
		return "Auto"
	default:
		return fmt.Sprintf("FlapFoldPolicy(%d)", f)
	}
}

// FlapTransitionType describes transitions types of a flap widget.
//
// It determines the type of animation when transitioning between children in a
// flap widget, as well as which areas can be swiped via flap:swipe-to-open and
// flap:swipe-to-close.
//
// New values may be added to this enum over time.
type FlapTransitionType C.gint

const (
	// FlapTransitionTypeOver: flap slides over the content, which is dimmed.
	// When folded, only the flap can be swiped.
	FlapTransitionTypeOver FlapTransitionType = iota
	// FlapTransitionTypeUnder: content slides over the flap. Only the content
	// can be swiped.
	FlapTransitionTypeUnder
	// FlapTransitionTypeSlide: flap slides offscreen when hidden, neither the
	// flap nor content overlap each other. Both widgets can be swiped.
	FlapTransitionTypeSlide
)

func marshalFlapTransitionType(p uintptr) (interface{}, error) {
	return FlapTransitionType(coreglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for FlapTransitionType.
func (f FlapTransitionType) String() string {
	switch f {
	case FlapTransitionTypeOver:
		return "Over"
	case FlapTransitionTypeUnder:
		return "Under"
	case FlapTransitionTypeSlide:
		return "Slide"
	default:
		return fmt.Sprintf("FlapTransitionType(%d)", f)
	}
}
