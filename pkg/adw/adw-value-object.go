// Code generated by girgen. DO NOT EDIT.

package adw

import (
	"unsafe"

	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: libadwaita-1
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <adwaita.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.adw_value_object_get_type()), F: marshalValueObjector},
	})
}

// ValueObject: object representing a GValue.
//
// The AdwValueObject object represents a GValue, allowing it to be used with
// GListModel.
type ValueObject struct {
	*externglib.Object
}

func wrapValueObject(obj *externglib.Object) *ValueObject {
	return &ValueObject{
		Object: obj,
	}
}

func marshalValueObjector(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapValueObject(obj), nil
}

// NewValueObject: create a new AdwValueObject from value.
func NewValueObject(value *externglib.Value) *ValueObject {
	var _arg1 *C.GValue         // out
	var _cret *C.AdwValueObject // in

	_arg1 = (*C.GValue)(unsafe.Pointer(&value.GValue))

	_cret = C.adw_value_object_new(_arg1)

	var _valueObject *ValueObject // out

	_valueObject = wrapValueObject(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _valueObject
}

// CopyValue copies data from the contained Value into dest.
func (value *ValueObject) CopyValue(dest *externglib.Value) {
	var _arg0 *C.AdwValueObject // out
	var _arg1 *C.GValue         // out

	_arg0 = (*C.AdwValueObject)(unsafe.Pointer(value.Native()))
	_arg1 = (*C.GValue)(unsafe.Pointer(&dest.GValue))

	C.adw_value_object_copy_value(_arg0, _arg1)
}

// DupString copies the contained string if the value is of type G_TYPE_STRING.
func (value *ValueObject) DupString() string {
	var _arg0 *C.AdwValueObject // out
	var _cret *C.char           // in

	_arg0 = (*C.AdwValueObject)(unsafe.Pointer(value.Native()))

	_cret = C.adw_value_object_dup_string(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	defer C.free(unsafe.Pointer(_cret))

	return _utf8
}

// String gets the contained string if the value is of type G_TYPE_STRING.
func (value *ValueObject) String() string {
	var _arg0 *C.AdwValueObject // out
	var _cret *C.char           // in

	_arg0 = (*C.AdwValueObject)(unsafe.Pointer(value.Native()))

	_cret = C.adw_value_object_get_string(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Value gets the contained value.
func (value *ValueObject) Value() *externglib.Value {
	var _arg0 *C.AdwValueObject // out
	var _cret *C.GValue         // in

	_arg0 = (*C.AdwValueObject)(unsafe.Pointer(value.Native()))

	_cret = C.adw_value_object_get_value(_arg0)

	var _ret *externglib.Value // out

	_ret = externglib.ValueFromNative(unsafe.Pointer(_cret))

	return _ret
}
