// Code generated by girgen. DO NOT EDIT.

package adw

import (
	"fmt"
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/glib/v2"
)

// #include <stdlib.h>
// #include <adwaita.h>
// #include <glib-object.h>
// extern void _gotk4_adw1_Toast_ConnectDismissed(gpointer, guintptr);
import "C"

// glib.Type values for adw-toast.go.
var (
	GTypeToastPriority = externglib.Type(C.adw_toast_priority_get_type())
	GTypeToast         = externglib.Type(C.adw_toast_get_type())
)

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeToastPriority, F: marshalToastPriority},
		{T: GTypeToast, F: marshalToast},
	})
}

// ToastPriority: toast behavior when another toast is already displayed.
type ToastPriority C.gint

const (
	// ToastPriorityNormal: toast will be queued if another toast is already
	// displayed.
	ToastPriorityNormal ToastPriority = iota
	// ToastPriorityHigh: toast will be displayed immediately, pushing the
	// previous toast into the queue instead.
	ToastPriorityHigh
)

func marshalToastPriority(p uintptr) (interface{}, error) {
	return ToastPriority(externglib.ValueFromNative(unsafe.Pointer(p)).Enum()), nil
}

// String returns the name in string for ToastPriority.
func (t ToastPriority) String() string {
	switch t {
	case ToastPriorityNormal:
		return "Normal"
	case ToastPriorityHigh:
		return "High"
	default:
		return fmt.Sprintf("ToastPriority(%d)", t)
	}
}

// ToastOverrider contains methods that are overridable.
type ToastOverrider interface {
}

// Toast: helper object for toastoverlay.
//
// Toasts are meant to be passed into toastoverlay.AddToast as follows:
//
//    adw_toast_overlay_add_toast (overlay, adw_toast_new (_("Simple Toast"));
//
//
// <picture> <source srcset="toast-simple-dark.png"
// media="(prefers-color-scheme: dark)"> <img src="toast-simple.png"
// alt="toast-simple"> </picture>
//
// Toasts always have a close button. They emit the toast::dismissed signal when
// disappearing.
//
// toast:timeout determines how long the toast stays on screen, while
// toast:priority determines how it behaves if another toast is already being
// displayed.
//
//
// Actions
//
// Toasts can have one button on them, with a label and an attached gio.Action.
//
//    AdwToast *toast = adw_toast_new (_("Toast with Action"));
//
//    adw_toast_set_button_label (toast, _("_Example"));
//    adw_toast_set_action_name (toast, "win.example");
//
//    adw_toast_overlay_add_toast (overlay, toast);
//
//
// <picture> <source srcset="toast-action-dark.png"
// media="(prefers-color-scheme: dark)"> <img src="toast-action.png"
// alt="toast-action"> </picture>
//
//
// Modifying toasts
//
// Toasts can be modified after they have been shown. For this, an AdwToast
// reference must be kept around while the toast is visible.
//
// A common use case for this is using toasts as undo prompts that stack with
// each other, allowing to batch undo the last deleted items:
//
//
//    static void
//    toast_undo_cb (GtkWidget  *sender,
//                   const char *action,
//                   GVariant   *param)
//    {
//      // Undo the deletion
//    }
//
//    static void
//    dismissed_cb (MyWindow *self)
//    {
//      self->undo_toast = NULL;
//
//      // Permanently delete the items
//    }
//
//    static void
//    delete_item (MyWindow *self,
//                 MyItem   *item)
//    {
//      g_autofree char *title = NULL;
//      int n_items;
//
//      // Mark the item as waiting for deletion
//      n_items = ... // The number of waiting items
//
//      if (!self->undo_toast) {
//        title = g_strdup_printf (_("‘s’ deleted"), ...);
//
//        self->undo_toast = adw_toast_new (title);
//
//        adw_toast_set_priority (self->undo_toast, ADW_TOAST_PRIORITY_HIGH);
//        adw_toast_set_button_label (self->undo_toast, _("_Undo"));
//        adw_toast_set_action_name (self->undo_toast, "toast.undo");
//
//        g_signal_connect_swapped (self->undo_toast, "dismissed",
//                                  G_CALLBACK (dismissed_cb), self);
//
//        adw_toast_overlay_add_toast (self->toast_overlay, self->undo_toast);
//
//        return;
//      }
//
//      title =
//        g_strdup_printf (ngettext ("<span font_features='tnum=1'>d</span> item deleted",
//                                   "<span font_features='tnum=1'>d</span> items deleted",
//                                   n_items), n_items);
//
//      adw_toast_set_title (self->undo_toast, title);
//    }
//
//    static void
//    my_window_class_init (MyWindowClass *klass)
//    {
//      GtkWidgetClass *widget_class = GTK_WIDGET_CLASS (klass);
//
//      gtk_widget_class_install_action (widget_class, "toast.undo", NULL, toast_undo_cb);
//    }
//
//
// <picture> <source srcset="toast-undo-dark.png" media="(prefers-color-scheme:
// dark)"> <img src="toast-undo.png" alt="toast-undo"> </picture>.
type Toast struct {
	_ [0]func() // equal guard
	*externglib.Object
}

var (
	_ externglib.Objector = (*Toast)(nil)
)

func classInitToaster(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapToast(obj *externglib.Object) *Toast {
	return &Toast{
		Object: obj,
	}
}

func marshalToast(p uintptr) (interface{}, error) {
	return wrapToast(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

//export _gotk4_adw1_Toast_ConnectDismissed
func _gotk4_adw1_Toast_ConnectDismissed(arg0 C.gpointer, arg1 C.guintptr) {
	var f func()
	{
		closure := externglib.ConnectedGeneratedClosure(uintptr(arg1))
		if closure == nil {
			panic("given unknown closure user_data")
		}
		defer closure.TryRepanic()

		f = closure.Func.(func())
	}

	f()
}

// ConnectDismissed is emitted when the toast has been dismissed.
func (self *Toast) ConnectDismissed(f func()) externglib.SignalHandle {
	return externglib.ConnectGeneratedClosure(self, "dismissed", false, unsafe.Pointer(C._gotk4_adw1_Toast_ConnectDismissed), f)
}

// NewToast creates a new AdwToast.
//
// The toast will use title as its title.
//
// title can be marked up with the Pango text markup language.
//
// The function takes the following parameters:
//
//    - title to be displayed.
//
// The function returns the following values:
//
//    - toast: new created AdwToast.
//
func NewToast(title string) *Toast {
	var _arg1 *C.char     // out
	var _cret *C.AdwToast // in

	_arg1 = (*C.char)(unsafe.Pointer(C.CString(title)))
	defer C.free(unsafe.Pointer(_arg1))

	_cret = C.adw_toast_new(_arg1)
	runtime.KeepAlive(title)

	var _toast *Toast // out

	_toast = wrapToast(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _toast
}

// Dismiss dismisses self.
func (self *Toast) Dismiss() {
	var _arg0 *C.AdwToast // out

	_arg0 = (*C.AdwToast)(unsafe.Pointer(externglib.InternObject(self).Native()))

	C.adw_toast_dismiss(_arg0)
	runtime.KeepAlive(self)
}

// ActionName gets the name of the associated action.
//
// The function returns the following values:
//
//    - utf8 (optional): action name.
//
func (self *Toast) ActionName() string {
	var _arg0 *C.AdwToast // out
	var _cret *C.char     // in

	_arg0 = (*C.AdwToast)(unsafe.Pointer(externglib.InternObject(self).Native()))

	_cret = C.adw_toast_get_action_name(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// ActionTargetValue gets the parameter for action invocations.
//
// The function returns the following values:
//
//    - variant (optional): action target.
//
func (self *Toast) ActionTargetValue() *glib.Variant {
	var _arg0 *C.AdwToast // out
	var _cret *C.GVariant // in

	_arg0 = (*C.AdwToast)(unsafe.Pointer(externglib.InternObject(self).Native()))

	_cret = C.adw_toast_get_action_target_value(_arg0)
	runtime.KeepAlive(self)

	var _variant *glib.Variant // out

	if _cret != nil {
		_variant = (*glib.Variant)(gextras.NewStructNative(unsafe.Pointer(_cret)))
		C.g_variant_ref(_cret)
		runtime.SetFinalizer(
			gextras.StructIntern(unsafe.Pointer(_variant)),
			func(intern *struct{ C unsafe.Pointer }) {
				C.g_variant_unref((*C.GVariant)(intern.C))
			},
		)
	}

	return _variant
}

// ButtonLabel gets the label to show on the button.
//
// The function returns the following values:
//
//    - utf8 (optional): button label.
//
func (self *Toast) ButtonLabel() string {
	var _arg0 *C.AdwToast // out
	var _cret *C.char     // in

	_arg0 = (*C.AdwToast)(unsafe.Pointer(externglib.InternObject(self).Native()))

	_cret = C.adw_toast_get_button_label(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// Priority gets priority for self.
//
// The function returns the following values:
//
//    - toastPriority: priority.
//
func (self *Toast) Priority() ToastPriority {
	var _arg0 *C.AdwToast        // out
	var _cret C.AdwToastPriority // in

	_arg0 = (*C.AdwToast)(unsafe.Pointer(externglib.InternObject(self).Native()))

	_cret = C.adw_toast_get_priority(_arg0)
	runtime.KeepAlive(self)

	var _toastPriority ToastPriority // out

	_toastPriority = ToastPriority(_cret)

	return _toastPriority
}

// Timeout gets timeout for self.
//
// The function returns the following values:
//
//    - guint: timeout.
//
func (self *Toast) Timeout() uint {
	var _arg0 *C.AdwToast // out
	var _cret C.guint     // in

	_arg0 = (*C.AdwToast)(unsafe.Pointer(externglib.InternObject(self).Native()))

	_cret = C.adw_toast_get_timeout(_arg0)
	runtime.KeepAlive(self)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// Title gets the title that will be displayed on the toast.
//
// The function returns the following values:
//
//    - utf8: title.
//
func (self *Toast) Title() string {
	var _arg0 *C.AdwToast // out
	var _cret *C.char     // in

	_arg0 = (*C.AdwToast)(unsafe.Pointer(externglib.InternObject(self).Native()))

	_cret = C.adw_toast_get_title(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// SetActionName sets the name of the associated action.
//
// The function takes the following parameters:
//
//    - actionName (optional): action name.
//
func (self *Toast) SetActionName(actionName string) {
	var _arg0 *C.AdwToast // out
	var _arg1 *C.char     // out

	_arg0 = (*C.AdwToast)(unsafe.Pointer(externglib.InternObject(self).Native()))
	if actionName != "" {
		_arg1 = (*C.char)(unsafe.Pointer(C.CString(actionName)))
		defer C.free(unsafe.Pointer(_arg1))
	}

	C.adw_toast_set_action_name(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(actionName)
}

// SetActionTargetValue sets the parameter for action invocations.
//
// The function takes the following parameters:
//
//    - actionTarget (optional): action target.
//
func (self *Toast) SetActionTargetValue(actionTarget *glib.Variant) {
	var _arg0 *C.AdwToast // out
	var _arg1 *C.GVariant // out

	_arg0 = (*C.AdwToast)(unsafe.Pointer(externglib.InternObject(self).Native()))
	if actionTarget != nil {
		_arg1 = (*C.GVariant)(gextras.StructNative(unsafe.Pointer(actionTarget)))
	}

	C.adw_toast_set_action_target_value(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(actionTarget)
}

// SetButtonLabel sets the label to show on the button.
//
// It set to NULL, the button won't be shown.
//
// The function takes the following parameters:
//
//    - buttonLabel (optional): button label.
//
func (self *Toast) SetButtonLabel(buttonLabel string) {
	var _arg0 *C.AdwToast // out
	var _arg1 *C.char     // out

	_arg0 = (*C.AdwToast)(unsafe.Pointer(externglib.InternObject(self).Native()))
	if buttonLabel != "" {
		_arg1 = (*C.char)(unsafe.Pointer(C.CString(buttonLabel)))
		defer C.free(unsafe.Pointer(_arg1))
	}

	C.adw_toast_set_button_label(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(buttonLabel)
}

// SetDetailedActionName sets the action name and its parameter.
//
// detailed_action_name is a string in the format accepted by
// gio.Action().ParseDetailedName.
//
// The function takes the following parameters:
//
//    - detailedActionName (optional): detailed action name.
//
func (self *Toast) SetDetailedActionName(detailedActionName string) {
	var _arg0 *C.AdwToast // out
	var _arg1 *C.char     // out

	_arg0 = (*C.AdwToast)(unsafe.Pointer(externglib.InternObject(self).Native()))
	if detailedActionName != "" {
		_arg1 = (*C.char)(unsafe.Pointer(C.CString(detailedActionName)))
		defer C.free(unsafe.Pointer(_arg1))
	}

	C.adw_toast_set_detailed_action_name(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(detailedActionName)
}

// SetPriority sets priority for self.
//
// Priority controls how the toast behaves when another toast is already being
// displayed.
//
// If priority is ADW_TOAST_PRIORITY_NORMAL, the toast will be queued.
//
// If priority is ADW_TOAST_PRIORITY_HIGH, the toast will be displayed
// immediately, pushing the previous toast into the queue instead.
//
// The function takes the following parameters:
//
//    - priority: priority.
//
func (self *Toast) SetPriority(priority ToastPriority) {
	var _arg0 *C.AdwToast        // out
	var _arg1 C.AdwToastPriority // out

	_arg0 = (*C.AdwToast)(unsafe.Pointer(externglib.InternObject(self).Native()))
	_arg1 = C.AdwToastPriority(priority)

	C.adw_toast_set_priority(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(priority)
}

// SetTimeout sets timeout for self.
//
// If timeout is 0, the toast is displayed indefinitely until manually
// dismissed.
//
// Toasts cannot disappear while being hovered, pressed (on touchscreen), or
// have keyboard focus inside them.
//
// The function takes the following parameters:
//
//    - timeout: timeout.
//
func (self *Toast) SetTimeout(timeout uint) {
	var _arg0 *C.AdwToast // out
	var _arg1 C.guint     // out

	_arg0 = (*C.AdwToast)(unsafe.Pointer(externglib.InternObject(self).Native()))
	_arg1 = C.guint(timeout)

	C.adw_toast_set_timeout(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(timeout)
}

// SetTitle sets the title that will be displayed on the toast.
//
// The function takes the following parameters:
//
//    - title: title.
//
func (self *Toast) SetTitle(title string) {
	var _arg0 *C.AdwToast // out
	var _arg1 *C.char     // out

	_arg0 = (*C.AdwToast)(unsafe.Pointer(externglib.InternObject(self).Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(title)))
	defer C.free(unsafe.Pointer(_arg1))

	C.adw_toast_set_title(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(title)
}
