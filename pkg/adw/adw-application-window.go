// Code generated by girgen. DO NOT EDIT.

package adw

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gio/v2"
	"github.com/diamondburned/gotk4/pkg/gtk/v4"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: libadwaita-1
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <adwaita.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.adw_application_window_get_type()), F: marshalApplicationWindower},
	})
}

// ApplicationWindow: freeform application window.
//
// AdwApplicationWindow is a gtk.ApplicationWindow subclass providing the same
// features as adw.Window.
//
// See adw.Window for details.
//
// Using gtk.Application:menubar is not supported and may result in visual
// glitches.
type ApplicationWindow struct {
	gtk.ApplicationWindow
}

func wrapApplicationWindow(obj *externglib.Object) *ApplicationWindow {
	return &ApplicationWindow{
		ApplicationWindow: gtk.ApplicationWindow{
			Window: gtk.Window{
				Widget: gtk.Widget{
					InitiallyUnowned: externglib.InitiallyUnowned{
						Object: obj,
					},
					Accessible: gtk.Accessible{
						Object: obj,
					},
					Buildable: gtk.Buildable{
						Object: obj,
					},
					ConstraintTarget: gtk.ConstraintTarget{
						Object: obj,
					},
					Object: obj,
				},
				Root: gtk.Root{
					NativeSurface: gtk.NativeSurface{
						Widget: gtk.Widget{
							InitiallyUnowned: externglib.InitiallyUnowned{
								Object: obj,
							},
							Accessible: gtk.Accessible{
								Object: obj,
							},
							Buildable: gtk.Buildable{
								Object: obj,
							},
							ConstraintTarget: gtk.ConstraintTarget{
								Object: obj,
							},
							Object: obj,
						},
					},
				},
				ShortcutManager: gtk.ShortcutManager{
					Object: obj,
				},
				Object: obj,
			},
			ActionGroup: gio.ActionGroup{
				Object: obj,
			},
			ActionMap: gio.ActionMap{
				Object: obj,
			},
			Object: obj,
		},
	}
}

func marshalApplicationWindower(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapApplicationWindow(obj), nil
}

// NewApplicationWindow creates a new AdwApplicationWindow for app.
func NewApplicationWindow(app *gtk.Application) *ApplicationWindow {
	var _arg1 *C.GtkApplication // out
	var _cret *C.GtkWidget      // in

	_arg1 = (*C.GtkApplication)(unsafe.Pointer(app.Native()))

	_cret = C.adw_application_window_new(_arg1)

	var _applicationWindow *ApplicationWindow // out

	_applicationWindow = wrapApplicationWindow(externglib.Take(unsafe.Pointer(_cret)))

	return _applicationWindow
}

// Child gets the child widget of self.
//
// This method should always be used instead of gtk.Window.GetChild().
func (self *ApplicationWindow) Child() gtk.Widgetter {
	var _arg0 *C.AdwApplicationWindow // out
	var _cret *C.GtkWidget            // in

	_arg0 = (*C.AdwApplicationWindow)(unsafe.Pointer(self.Native()))

	_cret = C.adw_application_window_get_child(_arg0)

	var _widget gtk.Widgetter // out

	if _cret != nil {
		_widget = (gextras.CastObject(externglib.Take(unsafe.Pointer(_cret)))).(gtk.Widgetter)
	}

	return _widget
}

// SetChild sets the child widget of self.
//
// This method should always be used instead of gtk.Window.SetChild().
func (self *ApplicationWindow) SetChild(child gtk.Widgetter) {
	var _arg0 *C.AdwApplicationWindow // out
	var _arg1 *C.GtkWidget            // out

	_arg0 = (*C.AdwApplicationWindow)(unsafe.Pointer(self.Native()))
	if child != nil {
		_arg1 = (*C.GtkWidget)(unsafe.Pointer(child.Native()))
	}

	C.adw_application_window_set_child(_arg0, _arg1)
}
