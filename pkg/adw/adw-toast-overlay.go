// Code generated by girgen. DO NOT EDIT.

package adw

import (
	"runtime"
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gtk/v4"
)

// #cgo pkg-config: libadwaita-1
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <stdlib.h>
// #include <adwaita.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.adw_toast_overlay_get_type()), F: marshalToastOverlayer},
	})
}

// ToastOverlay: widget showing toasts above its content.
//
// <picture> <source srcset="toast-overlay-dark.png"
// media="(prefers-color-scheme: dark)"> <img src="toast-overlay.png"
// alt="toast-overlay"> </picture>
//
// Toasts can be shown with toastoverlay.AddToast.
//
// See toast for details.
//
// CSS nodes
//
//    toastoverlay
//    ├── [child]
//    ├── toast
//    ┊   ├── label.heading
//        ├── [button]
//        ╰── button.circular.flat
//
//
// AdwToastOverlay's CSS node is called toastoverlay. It contains the child, as
// well as zero or more toast subnodes.
//
// Each of the toast nodes contains a label subnode with the .heading style
// class, optionally a button subnode, and another button subnode with .circular
// and .flat style classes.
//
//
// Accessibility
//
// AdwToastOverlay uses the GTK_ACCESSIBLE_ROLE_TAB_GROUP role.
type ToastOverlay struct {
	gtk.Widget
}

var (
	_ gtk.Widgetter = (*ToastOverlay)(nil)
)

func wrapToastOverlay(obj *externglib.Object) *ToastOverlay {
	return &ToastOverlay{
		Widget: gtk.Widget{
			InitiallyUnowned: externglib.InitiallyUnowned{
				Object: obj,
			},
			Accessible: gtk.Accessible{
				Object: obj,
			},
			Buildable: gtk.Buildable{
				Object: obj,
			},
			ConstraintTarget: gtk.ConstraintTarget{
				Object: obj,
			},
			Object: obj,
		},
	}
}

func marshalToastOverlayer(p uintptr) (interface{}, error) {
	return wrapToastOverlay(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewToastOverlay creates a new AdwToastOverlay.
func NewToastOverlay() *ToastOverlay {
	var _cret *C.GtkWidget // in

	_cret = C.adw_toast_overlay_new()

	var _toastOverlay *ToastOverlay // out

	_toastOverlay = wrapToastOverlay(externglib.Take(unsafe.Pointer(_cret)))

	return _toastOverlay
}

// AddToast displays toast.
//
// Only one toast can be shown at a time; if a toast is already being displayed,
// either toast or the original toast will be placed in a queue, depending on
// the priority of toast. See toast:priority.
//
// The function takes the following parameters:
//
//    - toast: toast.
//
func (self *ToastOverlay) AddToast(toast *Toast) {
	var _arg0 *C.AdwToastOverlay // out
	var _arg1 *C.AdwToast        // out

	_arg0 = (*C.AdwToastOverlay)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.AdwToast)(unsafe.Pointer(toast.Native()))
	C.g_object_ref(C.gpointer(toast.Native()))

	C.adw_toast_overlay_add_toast(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(toast)
}

// Child gets the child widget of self.
func (self *ToastOverlay) Child() gtk.Widgetter {
	var _arg0 *C.AdwToastOverlay // out
	var _cret *C.GtkWidget       // in

	_arg0 = (*C.AdwToastOverlay)(unsafe.Pointer(self.Native()))

	_cret = C.adw_toast_overlay_get_child(_arg0)
	runtime.KeepAlive(self)

	var _widget gtk.Widgetter // out

	if _cret != nil {
		{
			objptr := unsafe.Pointer(_cret)

			object := externglib.Take(objptr)
			rv, ok := (externglib.CastObject(object)).(gtk.Widgetter)
			if !ok {
				panic("object of type " + object.TypeFromInstance().String() + " is not gtk.Widgetter")
			}
			_widget = rv
		}
	}

	return _widget
}

// SetChild sets the child widget of self.
//
// The function takes the following parameters:
//
//    - child widget.
//
func (self *ToastOverlay) SetChild(child gtk.Widgetter) {
	var _arg0 *C.AdwToastOverlay // out
	var _arg1 *C.GtkWidget       // out

	_arg0 = (*C.AdwToastOverlay)(unsafe.Pointer(self.Native()))
	if child != nil {
		_arg1 = (*C.GtkWidget)(unsafe.Pointer(child.Native()))
	}

	C.adw_toast_overlay_set_child(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(child)
}
