// Code generated by girgen. DO NOT EDIT.

package adw

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gtk/v4"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: libadwaita-1
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <adwaita.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.adw_header_bar_get_type()), F: marshalHeaderBarrer},
	})
}

type HeaderBar struct {
	gtk.Widget
}

func wrapHeaderBar(obj *externglib.Object) *HeaderBar {
	return &HeaderBar{
		Widget: gtk.Widget{
			InitiallyUnowned: externglib.InitiallyUnowned{
				Object: obj,
			},
			Accessible: gtk.Accessible{
				Object: obj,
			},
			Buildable: gtk.Buildable{
				Object: obj,
			},
			ConstraintTarget: gtk.ConstraintTarget{
				Object: obj,
			},
			Object: obj,
		},
	}
}

func marshalHeaderBarrer(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapHeaderBar(obj), nil
}

// NewHeaderBar creates a new HeaderBar widget.
func NewHeaderBar() *HeaderBar {
	var _cret *C.GtkWidget // in

	_cret = C.adw_header_bar_new()

	var _headerBar *HeaderBar // out

	_headerBar = wrapHeaderBar(externglib.Take(unsafe.Pointer(_cret)))

	return _headerBar
}

// CenteringPolicy gets the policy self follows to horizontally align its center
// widget.
func (self *HeaderBar) CenteringPolicy() CenteringPolicy {
	var _arg0 *C.AdwHeaderBar      // out
	var _cret C.AdwCenteringPolicy // in

	_arg0 = (*C.AdwHeaderBar)(unsafe.Pointer(self.Native()))

	_cret = C.adw_header_bar_get_centering_policy(_arg0)

	var _centeringPolicy CenteringPolicy // out

	_centeringPolicy = CenteringPolicy(_cret)

	return _centeringPolicy
}

// DecorationLayout gets the decoration layout set with
// adw_header_bar_set_decoration_layout().
func (self *HeaderBar) DecorationLayout() string {
	var _arg0 *C.AdwHeaderBar // out
	var _cret *C.char         // in

	_arg0 = (*C.AdwHeaderBar)(unsafe.Pointer(self.Native()))

	_cret = C.adw_header_bar_get_decoration_layout(_arg0)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// ShowEndTitleButtons returns whether this header bar shows the standard window
// title buttons.
func (self *HeaderBar) ShowEndTitleButtons() bool {
	var _arg0 *C.AdwHeaderBar // out
	var _cret C.gboolean      // in

	_arg0 = (*C.AdwHeaderBar)(unsafe.Pointer(self.Native()))

	_cret = C.adw_header_bar_get_show_end_title_buttons(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ShowStartTitleButtons returns whether this header bar shows the standard
// window title buttons.
func (self *HeaderBar) ShowStartTitleButtons() bool {
	var _arg0 *C.AdwHeaderBar // out
	var _cret C.gboolean      // in

	_arg0 = (*C.AdwHeaderBar)(unsafe.Pointer(self.Native()))

	_cret = C.adw_header_bar_get_show_start_title_buttons(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// TitleWidget retrieves the title widget widget of the header. See
// adw_header_bar_set_title_widget().
func (self *HeaderBar) TitleWidget() gtk.Widgetter {
	var _arg0 *C.AdwHeaderBar // out
	var _cret *C.GtkWidget    // in

	_arg0 = (*C.AdwHeaderBar)(unsafe.Pointer(self.Native()))

	_cret = C.adw_header_bar_get_title_widget(_arg0)

	var _widget gtk.Widgetter // out

	if _cret != nil {
		_widget = (gextras.CastObject(externglib.Take(unsafe.Pointer(_cret)))).(gtk.Widgetter)
	}

	return _widget
}

// PackEnd adds child to self, packed with reference to the end of the self.
func (self *HeaderBar) PackEnd(child gtk.Widgetter) {
	var _arg0 *C.AdwHeaderBar // out
	var _arg1 *C.GtkWidget    // out

	_arg0 = (*C.AdwHeaderBar)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(child.Native()))

	C.adw_header_bar_pack_end(_arg0, _arg1)
}

// PackStart adds child to self, packed with reference to the start of the self.
func (self *HeaderBar) PackStart(child gtk.Widgetter) {
	var _arg0 *C.AdwHeaderBar // out
	var _arg1 *C.GtkWidget    // out

	_arg0 = (*C.AdwHeaderBar)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(child.Native()))

	C.adw_header_bar_pack_start(_arg0, _arg1)
}

// Remove removes a child from self, after it has been added with
// adw_header_bar_pack_start(), adw_header_bar_pack_end() or
// adw_header_bar_set_title_widget().
func (self *HeaderBar) Remove(child gtk.Widgetter) {
	var _arg0 *C.AdwHeaderBar // out
	var _arg1 *C.GtkWidget    // out

	_arg0 = (*C.AdwHeaderBar)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(child.Native()))

	C.adw_header_bar_remove(_arg0, _arg1)
}

// SetCenteringPolicy sets the policy self must follow to horizontally align its
// center widget.
func (self *HeaderBar) SetCenteringPolicy(centeringPolicy CenteringPolicy) {
	var _arg0 *C.AdwHeaderBar      // out
	var _arg1 C.AdwCenteringPolicy // out

	_arg0 = (*C.AdwHeaderBar)(unsafe.Pointer(self.Native()))
	_arg1 = C.AdwCenteringPolicy(centeringPolicy)

	C.adw_header_bar_set_centering_policy(_arg0, _arg1)
}

// SetDecorationLayout sets the decoration layout for this header bar,
// overriding the Settings:gtk-decoration-layout setting.
//
// There can be valid reasons for overriding the setting, such as a header bar
// design that does not allow for buttons to take room on the right, or only
// offers room for a single close button. Split header bars are another example
// for overriding the setting.
//
// The format of the string is button names, separated by commas. A colon
// separates the buttons that should appear on the left from those on the right.
// Recognized button names are minimize, maximize, close and icon (the window
// icon).
//
// For example, “icon:minimize,maximize,close” specifies an icon on the left,
// and minimize, maximize and close buttons on the right.
func (self *HeaderBar) SetDecorationLayout(layout string) {
	var _arg0 *C.AdwHeaderBar // out
	var _arg1 *C.char         // out

	_arg0 = (*C.AdwHeaderBar)(unsafe.Pointer(self.Native()))
	if layout != "" {
		_arg1 = (*C.char)(unsafe.Pointer(C.CString(layout)))
		defer C.free(unsafe.Pointer(_arg1))
	}

	C.adw_header_bar_set_decoration_layout(_arg0, _arg1)
}

// SetShowEndTitleButtons sets whether this header bar shows the standard window
// title buttons including close, maximize, and minimize.
func (self *HeaderBar) SetShowEndTitleButtons(setting bool) {
	var _arg0 *C.AdwHeaderBar // out
	var _arg1 C.gboolean      // out

	_arg0 = (*C.AdwHeaderBar)(unsafe.Pointer(self.Native()))
	if setting {
		_arg1 = C.TRUE
	}

	C.adw_header_bar_set_show_end_title_buttons(_arg0, _arg1)
}

// SetShowStartTitleButtons sets whether this header bar shows the standard
// window title buttons including close, maximize, and minimize.
func (self *HeaderBar) SetShowStartTitleButtons(setting bool) {
	var _arg0 *C.AdwHeaderBar // out
	var _arg1 C.gboolean      // out

	_arg0 = (*C.AdwHeaderBar)(unsafe.Pointer(self.Native()))
	if setting {
		_arg1 = C.TRUE
	}

	C.adw_header_bar_set_show_start_title_buttons(_arg0, _arg1)
}

// SetTitleWidget sets the title for the HeaderBar.
//
// When set to NULL, the headerbar will display the title of the window it is
// contained in.
//
// The title should help a user identify the current view. To achieve the same
// style as the builtin title, use the “title” style class.
//
// You should set the title widget to NULL, for the window title label to be
// visible again.
func (self *HeaderBar) SetTitleWidget(titleWidget gtk.Widgetter) {
	var _arg0 *C.AdwHeaderBar // out
	var _arg1 *C.GtkWidget    // out

	_arg0 = (*C.AdwHeaderBar)(unsafe.Pointer(self.Native()))
	if titleWidget != nil {
		_arg1 = (*C.GtkWidget)(unsafe.Pointer(titleWidget.Native()))
	}

	C.adw_header_bar_set_title_widget(_arg0, _arg1)
}
