// Code generated by girgen. DO NOT EDIT.

package adw

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	coreglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <adwaita.h>
// #include <glib-object.h>
import "C"

// GType values.
var (
	GTypeViewStackPage = coreglib.Type(C.adw_view_stack_page_get_type())
)

func init() {
	coreglib.RegisterGValueMarshalers([]coreglib.TypeMarshaler{
		coreglib.TypeMarshaler{T: GTypeViewStackPage, F: marshalViewStackPage},
	})
}

// ViewStackPageOverrides contains methods that are overridable.
type ViewStackPageOverrides struct {
}

func defaultViewStackPageOverrides(v *ViewStackPage) ViewStackPageOverrides {
	return ViewStackPageOverrides{}
}

// ViewStackPage: auxiliary class used by viewstack.
type ViewStackPage struct {
	_ [0]func() // equal guard
	*coreglib.Object
}

var (
	_ coreglib.Objector = (*ViewStackPage)(nil)
)

func init() {
	coreglib.RegisterClassInfo[*ViewStackPage, *ViewStackPageClass, ViewStackPageOverrides](
		GTypeViewStackPage,
		initViewStackPageClass,
		wrapViewStackPage,
		defaultViewStackPageOverrides,
	)
}

func initViewStackPageClass(gclass unsafe.Pointer, overrides ViewStackPageOverrides, classInitFunc func(*ViewStackPageClass)) {
	if classInitFunc != nil {
		class := (*ViewStackPageClass)(gextras.NewStructNative(gclass))
		classInitFunc(class)
	}
}

func wrapViewStackPage(obj *coreglib.Object) *ViewStackPage {
	return &ViewStackPage{
		Object: obj,
	}
}

func marshalViewStackPage(p uintptr) (interface{}, error) {
	return wrapViewStackPage(coreglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// BadgeNumber gets the badge number for this page.
//
// The function returns the following values:
//
//    - guint: badge number for this page.
//
func (self *ViewStackPage) BadgeNumber() uint {
	var _arg0 *C.AdwViewStackPage // out
	var _cret C.guint             // in

	_arg0 = (*C.AdwViewStackPage)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.adw_view_stack_page_get_badge_number(_arg0)
	runtime.KeepAlive(self)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// IconName gets the icon name of the page.
//
// The function returns the following values:
//
//    - utf8 (optional): icon name of the page.
//
func (self *ViewStackPage) IconName() string {
	var _arg0 *C.AdwViewStackPage // out
	var _cret *C.char             // in

	_arg0 = (*C.AdwViewStackPage)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.adw_view_stack_page_get_icon_name(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// Name gets the name of the page.
//
// The function returns the following values:
//
//    - utf8 (optional): name of the page.
//
func (self *ViewStackPage) Name() string {
	var _arg0 *C.AdwViewStackPage // out
	var _cret *C.char             // in

	_arg0 = (*C.AdwViewStackPage)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.adw_view_stack_page_get_name(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// NeedsAttention gets whether the page is marked as “needs attention”.
//
// The function returns the following values:
//
//    - ok: whether the page needs attention.
//
func (self *ViewStackPage) NeedsAttention() bool {
	var _arg0 *C.AdwViewStackPage // out
	var _cret C.gboolean          // in

	_arg0 = (*C.AdwViewStackPage)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.adw_view_stack_page_get_needs_attention(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Title gets the page title.
//
// The function returns the following values:
//
//    - utf8 (optional): page title.
//
func (self *ViewStackPage) Title() string {
	var _arg0 *C.AdwViewStackPage // out
	var _cret *C.char             // in

	_arg0 = (*C.AdwViewStackPage)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.adw_view_stack_page_get_title(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// UseUnderline gets whether underlines in the page title indicate mnemonics.
//
// The function returns the following values:
//
//    - ok: whether underlines in the page title indicate mnemonics.
//
func (self *ViewStackPage) UseUnderline() bool {
	var _arg0 *C.AdwViewStackPage // out
	var _cret C.gboolean          // in

	_arg0 = (*C.AdwViewStackPage)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.adw_view_stack_page_get_use_underline(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Visible gets whether self is visible in its AdwViewStack.
//
// This is independent from the gtk.Widget:visible property of its widget.
//
// The function returns the following values:
//
//    - ok: whether self is visible.
//
func (self *ViewStackPage) Visible() bool {
	var _arg0 *C.AdwViewStackPage // out
	var _cret C.gboolean          // in

	_arg0 = (*C.AdwViewStackPage)(unsafe.Pointer(coreglib.InternObject(self).Native()))

	_cret = C.adw_view_stack_page_get_visible(_arg0)
	runtime.KeepAlive(self)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetBadgeNumber sets the badge number for this page.
//
// The function takes the following parameters:
//
//    - badgeNumber: new value to set.
//
func (self *ViewStackPage) SetBadgeNumber(badgeNumber uint) {
	var _arg0 *C.AdwViewStackPage // out
	var _arg1 C.guint             // out

	_arg0 = (*C.AdwViewStackPage)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	_arg1 = C.guint(badgeNumber)

	C.adw_view_stack_page_set_badge_number(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(badgeNumber)
}

// SetIconName sets the icon name of the page.
//
// The function takes the following parameters:
//
//    - iconName (optional): icon name.
//
func (self *ViewStackPage) SetIconName(iconName string) {
	var _arg0 *C.AdwViewStackPage // out
	var _arg1 *C.char             // out

	_arg0 = (*C.AdwViewStackPage)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if iconName != "" {
		_arg1 = (*C.char)(unsafe.Pointer(C.CString(iconName)))
		defer C.free(unsafe.Pointer(_arg1))
	}

	C.adw_view_stack_page_set_icon_name(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(iconName)
}

// SetName sets the name of the page.
//
// The function takes the following parameters:
//
//    - name (optional): page name.
//
func (self *ViewStackPage) SetName(name string) {
	var _arg0 *C.AdwViewStackPage // out
	var _arg1 *C.char             // out

	_arg0 = (*C.AdwViewStackPage)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if name != "" {
		_arg1 = (*C.char)(unsafe.Pointer(C.CString(name)))
		defer C.free(unsafe.Pointer(_arg1))
	}

	C.adw_view_stack_page_set_name(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(name)
}

// SetNeedsAttention sets whether the page is marked as “needs attention”.
//
// The function takes the following parameters:
//
//    - needsAttention: new value to set.
//
func (self *ViewStackPage) SetNeedsAttention(needsAttention bool) {
	var _arg0 *C.AdwViewStackPage // out
	var _arg1 C.gboolean          // out

	_arg0 = (*C.AdwViewStackPage)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if needsAttention {
		_arg1 = C.TRUE
	}

	C.adw_view_stack_page_set_needs_attention(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(needsAttention)
}

// SetTitle sets the page title.
//
// The function takes the following parameters:
//
//    - title (optional): page title.
//
func (self *ViewStackPage) SetTitle(title string) {
	var _arg0 *C.AdwViewStackPage // out
	var _arg1 *C.char             // out

	_arg0 = (*C.AdwViewStackPage)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if title != "" {
		_arg1 = (*C.char)(unsafe.Pointer(C.CString(title)))
		defer C.free(unsafe.Pointer(_arg1))
	}

	C.adw_view_stack_page_set_title(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(title)
}

// SetUseUnderline sets whether underlines in the page title indicate mnemonics.
//
// The function takes the following parameters:
//
//    - useUnderline: new value to set.
//
func (self *ViewStackPage) SetUseUnderline(useUnderline bool) {
	var _arg0 *C.AdwViewStackPage // out
	var _arg1 C.gboolean          // out

	_arg0 = (*C.AdwViewStackPage)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if useUnderline {
		_arg1 = C.TRUE
	}

	C.adw_view_stack_page_set_use_underline(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(useUnderline)
}

// SetVisible sets whether page is visible in its AdwViewStack.
//
// The function takes the following parameters:
//
//    - visible: whether self is visible.
//
func (self *ViewStackPage) SetVisible(visible bool) {
	var _arg0 *C.AdwViewStackPage // out
	var _arg1 C.gboolean          // out

	_arg0 = (*C.AdwViewStackPage)(unsafe.Pointer(coreglib.InternObject(self).Native()))
	if visible {
		_arg1 = C.TRUE
	}

	C.adw_view_stack_page_set_visible(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(visible)
}
