// Code generated by girgen. DO NOT EDIT.

package adw

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/gtk/v4"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: libadwaita-1
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <adwaita.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.adw_view_switcher_title_get_type()), F: marshalViewSwitcherTitler},
	})
}

type ViewSwitcherTitle struct {
	gtk.Widget
}

func wrapViewSwitcherTitle(obj *externglib.Object) *ViewSwitcherTitle {
	return &ViewSwitcherTitle{
		Widget: gtk.Widget{
			InitiallyUnowned: externglib.InitiallyUnowned{
				Object: obj,
			},
			Accessible: gtk.Accessible{
				Object: obj,
			},
			Buildable: gtk.Buildable{
				Object: obj,
			},
			ConstraintTarget: gtk.ConstraintTarget{
				Object: obj,
			},
			Object: obj,
		},
	}
}

func marshalViewSwitcherTitler(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapViewSwitcherTitle(obj), nil
}

// NewViewSwitcherTitle creates a new ViewSwitcherTitle widget.
func NewViewSwitcherTitle() *ViewSwitcherTitle {
	var _cret *C.GtkWidget // in

	_cret = C.adw_view_switcher_title_new()

	var _viewSwitcherTitle *ViewSwitcherTitle // out

	_viewSwitcherTitle = wrapViewSwitcherTitle(externglib.Take(unsafe.Pointer(_cret)))

	return _viewSwitcherTitle
}

// Policy gets the policy of self.
func (self *ViewSwitcherTitle) Policy() ViewSwitcherPolicy {
	var _arg0 *C.AdwViewSwitcherTitle // out
	var _cret C.AdwViewSwitcherPolicy // in

	_arg0 = (*C.AdwViewSwitcherTitle)(unsafe.Pointer(self.Native()))

	_cret = C.adw_view_switcher_title_get_policy(_arg0)

	var _viewSwitcherPolicy ViewSwitcherPolicy // out

	_viewSwitcherPolicy = ViewSwitcherPolicy(_cret)

	return _viewSwitcherPolicy
}

// Stack: get the Stack being controlled by the ViewSwitcher.
func (self *ViewSwitcherTitle) Stack() *gtk.Stack {
	var _arg0 *C.AdwViewSwitcherTitle // out
	var _cret *C.GtkStack             // in

	_arg0 = (*C.AdwViewSwitcherTitle)(unsafe.Pointer(self.Native()))

	_cret = C.adw_view_switcher_title_get_stack(_arg0)

	var _stack *gtk.Stack // out

	{
		obj := externglib.Take(unsafe.Pointer(_cret))
		_stack = &gtk.Stack{
			Widget: gtk.Widget{
				InitiallyUnowned: externglib.InitiallyUnowned{
					Object: obj,
				},
				Accessible: gtk.Accessible{
					Object: obj,
				},
				Buildable: gtk.Buildable{
					Object: obj,
				},
				ConstraintTarget: gtk.ConstraintTarget{
					Object: obj,
				},
				Object: obj,
			},
		}
	}

	return _stack
}

// Subtitle gets the subtitle of self. See
// adw_view_switcher_title_set_subtitle().
func (self *ViewSwitcherTitle) Subtitle() string {
	var _arg0 *C.AdwViewSwitcherTitle // out
	var _cret *C.char                 // in

	_arg0 = (*C.AdwViewSwitcherTitle)(unsafe.Pointer(self.Native()))

	_cret = C.adw_view_switcher_title_get_subtitle(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Title gets the title of self. See adw_view_switcher_title_set_title().
func (self *ViewSwitcherTitle) Title() string {
	var _arg0 *C.AdwViewSwitcherTitle // out
	var _cret *C.char                 // in

	_arg0 = (*C.AdwViewSwitcherTitle)(unsafe.Pointer(self.Native()))

	_cret = C.adw_view_switcher_title_get_title(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// TitleVisible: get whether the title label of self is visible.
func (self *ViewSwitcherTitle) TitleVisible() bool {
	var _arg0 *C.AdwViewSwitcherTitle // out
	var _cret C.gboolean              // in

	_arg0 = (*C.AdwViewSwitcherTitle)(unsafe.Pointer(self.Native()))

	_cret = C.adw_view_switcher_title_get_title_visible(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// ViewSwitcherEnabled gets whether self's view switcher is enabled.
//
// See adw_view_switcher_title_set_view_switcher_enabled().
func (self *ViewSwitcherTitle) ViewSwitcherEnabled() bool {
	var _arg0 *C.AdwViewSwitcherTitle // out
	var _cret C.gboolean              // in

	_arg0 = (*C.AdwViewSwitcherTitle)(unsafe.Pointer(self.Native()))

	_cret = C.adw_view_switcher_title_get_view_switcher_enabled(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// SetPolicy sets the policy of self.
func (self *ViewSwitcherTitle) SetPolicy(policy ViewSwitcherPolicy) {
	var _arg0 *C.AdwViewSwitcherTitle // out
	var _arg1 C.AdwViewSwitcherPolicy // out

	_arg0 = (*C.AdwViewSwitcherTitle)(unsafe.Pointer(self.Native()))
	_arg1 = C.AdwViewSwitcherPolicy(policy)

	C.adw_view_switcher_title_set_policy(_arg0, _arg1)
}

// SetStack sets the Stack to control.
func (self *ViewSwitcherTitle) SetStack(stack *gtk.Stack) {
	var _arg0 *C.AdwViewSwitcherTitle // out
	var _arg1 *C.GtkStack             // out

	_arg0 = (*C.AdwViewSwitcherTitle)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.GtkStack)(unsafe.Pointer(stack.Native()))

	C.adw_view_switcher_title_set_stack(_arg0, _arg1)
}

// SetSubtitle sets the subtitle of self. The subtitle should give a user
// additional details.
func (self *ViewSwitcherTitle) SetSubtitle(subtitle string) {
	var _arg0 *C.AdwViewSwitcherTitle // out
	var _arg1 *C.char                 // out

	_arg0 = (*C.AdwViewSwitcherTitle)(unsafe.Pointer(self.Native()))
	if subtitle != "" {
		_arg1 = (*C.char)(unsafe.Pointer(C.CString(subtitle)))
		defer C.free(unsafe.Pointer(_arg1))
	}

	C.adw_view_switcher_title_set_subtitle(_arg0, _arg1)
}

// SetTitle sets the title of self. The title should give a user additional
// details. A good title should not include the application name.
func (self *ViewSwitcherTitle) SetTitle(title string) {
	var _arg0 *C.AdwViewSwitcherTitle // out
	var _arg1 *C.char                 // out

	_arg0 = (*C.AdwViewSwitcherTitle)(unsafe.Pointer(self.Native()))
	if title != "" {
		_arg1 = (*C.char)(unsafe.Pointer(C.CString(title)))
		defer C.free(unsafe.Pointer(_arg1))
	}

	C.adw_view_switcher_title_set_title(_arg0, _arg1)
}

// SetViewSwitcherEnabled: make self enable or disable its view switcher. If it
// is disabled, the title will be displayed instead. This allows to
// programmatically and prematurely hide the view switcher of self even if it
// fits in the available space.
//
// This can be used e.g. to ensure the view switcher is hidden below a certain
// window width, or any other constraint you find suitable.
func (self *ViewSwitcherTitle) SetViewSwitcherEnabled(enabled bool) {
	var _arg0 *C.AdwViewSwitcherTitle // out
	var _arg1 C.gboolean              // out

	_arg0 = (*C.AdwViewSwitcherTitle)(unsafe.Pointer(self.Native()))
	if enabled {
		_arg1 = C.TRUE
	}

	C.adw_view_switcher_title_set_view_switcher_enabled(_arg0, _arg1)
}
