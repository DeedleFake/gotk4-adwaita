// Code generated by girgen. DO NOT EDIT.

package adw

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gtk/v4"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: libadwaita-1
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <adwaita.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.adw_expander_row_get_type()), F: marshalExpanderRower},
	})
}

type ExpanderRow struct {
	PreferencesRow
}

var _ gextras.Nativer = (*ExpanderRow)(nil)

func wrapExpanderRow(obj *externglib.Object) *ExpanderRow {
	return &ExpanderRow{
		PreferencesRow: PreferencesRow{
			ListBoxRow: gtk.ListBoxRow{
				Widget: gtk.Widget{
					InitiallyUnowned: externglib.InitiallyUnowned{
						Object: obj,
					},
					Accessible: gtk.Accessible{
						Object: obj,
					},
					Buildable: gtk.Buildable{
						Object: obj,
					},
					ConstraintTarget: gtk.ConstraintTarget{
						Object: obj,
					},
				},
				Actionable: gtk.Actionable{
					Widget: gtk.Widget{
						InitiallyUnowned: externglib.InitiallyUnowned{
							Object: obj,
						},
						Accessible: gtk.Accessible{
							Object: obj,
						},
						Buildable: gtk.Buildable{
							Object: obj,
						},
						ConstraintTarget: gtk.ConstraintTarget{
							Object: obj,
						},
					},
				},
			},
		},
	}
}

func marshalExpanderRower(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapExpanderRow(obj), nil
}

// NewExpanderRow creates a new ExpanderRow.
func NewExpanderRow() *ExpanderRow {
	var _cret *C.GtkWidget // in

	_cret = C.adw_expander_row_new()

	var _expanderRow *ExpanderRow // out

	_expanderRow = wrapExpanderRow(externglib.Take(unsafe.Pointer(_cret)))

	return _expanderRow
}

func (self *ExpanderRow) Add(child gtk.Widgetter) {
	var _arg0 *C.AdwExpanderRow // out
	var _arg1 *C.GtkWidget      // out

	_arg0 = (*C.AdwExpanderRow)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer((child).(gextras.Nativer).Native()))

	C.adw_expander_row_add(_arg0, _arg1)
}

// AddAction adds an action widget to self.
func (self *ExpanderRow) AddAction(widget gtk.Widgetter) {
	var _arg0 *C.AdwExpanderRow // out
	var _arg1 *C.GtkWidget      // out

	_arg0 = (*C.AdwExpanderRow)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer((widget).(gextras.Nativer).Native()))

	C.adw_expander_row_add_action(_arg0, _arg1)
}

// AddPrefix adds a prefix widget to self.
func (self *ExpanderRow) AddPrefix(widget gtk.Widgetter) {
	var _arg0 *C.AdwExpanderRow // out
	var _arg1 *C.GtkWidget      // out

	_arg0 = (*C.AdwExpanderRow)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer((widget).(gextras.Nativer).Native()))

	C.adw_expander_row_add_prefix(_arg0, _arg1)
}

// EnableExpansion gets whether the expansion of self is enabled.
func (self *ExpanderRow) EnableExpansion() bool {
	var _arg0 *C.AdwExpanderRow // out
	var _cret C.gboolean        // in

	_arg0 = (*C.AdwExpanderRow)(unsafe.Pointer(self.Native()))

	_cret = C.adw_expander_row_get_enable_expansion(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (self *ExpanderRow) Expanded() bool {
	var _arg0 *C.AdwExpanderRow // out
	var _cret C.gboolean        // in

	_arg0 = (*C.AdwExpanderRow)(unsafe.Pointer(self.Native()))

	_cret = C.adw_expander_row_get_expanded(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// IconName gets the icon name for self.
func (self *ExpanderRow) IconName() string {
	var _arg0 *C.AdwExpanderRow // out
	var _cret *C.char           // in

	_arg0 = (*C.AdwExpanderRow)(unsafe.Pointer(self.Native()))

	_cret = C.adw_expander_row_get_icon_name(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// ShowEnableSwitch gets whether the switch enabling the expansion of self is
// visible.
func (self *ExpanderRow) ShowEnableSwitch() bool {
	var _arg0 *C.AdwExpanderRow // out
	var _cret C.gboolean        // in

	_arg0 = (*C.AdwExpanderRow)(unsafe.Pointer(self.Native()))

	_cret = C.adw_expander_row_get_show_enable_switch(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Subtitle gets the subtitle for self.
func (self *ExpanderRow) Subtitle() string {
	var _arg0 *C.AdwExpanderRow // out
	var _cret *C.char           // in

	_arg0 = (*C.AdwExpanderRow)(unsafe.Pointer(self.Native()))

	_cret = C.adw_expander_row_get_subtitle(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// UseUnderline gets whether an embedded underline in the text of the title and
// subtitle labels indicates a mnemonic. See
// adw_expander_row_set_use_underline().
func (self *ExpanderRow) UseUnderline() bool {
	var _arg0 *C.AdwExpanderRow // out
	var _cret C.gboolean        // in

	_arg0 = (*C.AdwExpanderRow)(unsafe.Pointer(self.Native()))

	_cret = C.adw_expander_row_get_use_underline(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

func (self *ExpanderRow) Remove(child gtk.Widgetter) {
	var _arg0 *C.AdwExpanderRow // out
	var _arg1 *C.GtkWidget      // out

	_arg0 = (*C.AdwExpanderRow)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer((child).(gextras.Nativer).Native()))

	C.adw_expander_row_remove(_arg0, _arg1)
}

// SetEnableExpansion sets whether the expansion of self is enabled.
func (self *ExpanderRow) SetEnableExpansion(enableExpansion bool) {
	var _arg0 *C.AdwExpanderRow // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.AdwExpanderRow)(unsafe.Pointer(self.Native()))
	if enableExpansion {
		_arg1 = C.TRUE
	}

	C.adw_expander_row_set_enable_expansion(_arg0, _arg1)
}

func (self *ExpanderRow) SetExpanded(expanded bool) {
	var _arg0 *C.AdwExpanderRow // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.AdwExpanderRow)(unsafe.Pointer(self.Native()))
	if expanded {
		_arg1 = C.TRUE
	}

	C.adw_expander_row_set_expanded(_arg0, _arg1)
}

// SetIconName sets the icon name for self.
func (self *ExpanderRow) SetIconName(iconName string) {
	var _arg0 *C.AdwExpanderRow // out
	var _arg1 *C.char           // out

	_arg0 = (*C.AdwExpanderRow)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(iconName)))

	C.adw_expander_row_set_icon_name(_arg0, _arg1)
}

// SetShowEnableSwitch sets whether the switch enabling the expansion of self is
// visible.
func (self *ExpanderRow) SetShowEnableSwitch(showEnableSwitch bool) {
	var _arg0 *C.AdwExpanderRow // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.AdwExpanderRow)(unsafe.Pointer(self.Native()))
	if showEnableSwitch {
		_arg1 = C.TRUE
	}

	C.adw_expander_row_set_show_enable_switch(_arg0, _arg1)
}

// SetSubtitle sets the subtitle for self.
func (self *ExpanderRow) SetSubtitle(subtitle string) {
	var _arg0 *C.AdwExpanderRow // out
	var _arg1 *C.char           // out

	_arg0 = (*C.AdwExpanderRow)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(subtitle)))

	C.adw_expander_row_set_subtitle(_arg0, _arg1)
}

// SetUseUnderline: if true, an underline in the text of the title and subtitle
// labels indicates the next character should be used for the mnemonic
// accelerator key.
func (self *ExpanderRow) SetUseUnderline(useUnderline bool) {
	var _arg0 *C.AdwExpanderRow // out
	var _arg1 C.gboolean        // out

	_arg0 = (*C.AdwExpanderRow)(unsafe.Pointer(self.Native()))
	if useUnderline {
		_arg1 = C.TRUE
	}

	C.adw_expander_row_set_use_underline(_arg0, _arg1)
}
