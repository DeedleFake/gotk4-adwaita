// Code generated by girgen. DO NOT EDIT.

package adw

import (
	"runtime"
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gbox"
	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
)

// #include <stdlib.h>
// #include <adwaita.h>
// #include <glib-object.h>
// extern void _gotk4_adw1_AnimationTargetFunc(double, gpointer);
// extern void callbackDelete(gpointer);
import "C"

// glib.Type values for adw-animation-target.go.
var (
	GTypeAnimationTarget         = externglib.Type(C.adw_animation_target_get_type())
	GTypeCallbackAnimationTarget = externglib.Type(C.adw_callback_animation_target_get_type())
)

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypeAnimationTarget, F: marshalAnimationTarget},
		{T: GTypeCallbackAnimationTarget, F: marshalCallbackAnimationTarget},
	})
}

// AnimationTargetFunc: prototype for animation targets based on user callbacks.
type AnimationTargetFunc func(value float64)

//export _gotk4_adw1_AnimationTargetFunc
func _gotk4_adw1_AnimationTargetFunc(arg1 C.double, arg2 C.gpointer) {
	var fn AnimationTargetFunc
	{
		v := gbox.Get(uintptr(arg2))
		if v == nil {
			panic(`callback not found`)
		}
		fn = v.(AnimationTargetFunc)
	}

	var _value float64 // out

	_value = float64(arg1)

	fn(_value)
}

// AnimationTargetOverrider contains methods that are overridable.
type AnimationTargetOverrider interface {
}

// AnimationTarget represents a value animation can animate.
//
// Currently the only implementation is callbackanimationtarget.
type AnimationTarget struct {
	_ [0]func() // equal guard
	*externglib.Object
}

var (
	_ externglib.Objector = (*AnimationTarget)(nil)
)

// AnimationTargetter describes types inherited from class AnimationTarget.
//
// To get the original type, the caller must assert this to an interface or
// another type.
type AnimationTargetter interface {
	externglib.Objector
	baseAnimationTarget() *AnimationTarget
}

var _ AnimationTargetter = (*AnimationTarget)(nil)

func classInitAnimationTargetter(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapAnimationTarget(obj *externglib.Object) *AnimationTarget {
	return &AnimationTarget{
		Object: obj,
	}
}

func marshalAnimationTarget(p uintptr) (interface{}, error) {
	return wrapAnimationTarget(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

func (v *AnimationTarget) baseAnimationTarget() *AnimationTarget {
	return v
}

// BaseAnimationTarget returns the underlying base object.
func BaseAnimationTarget(obj AnimationTargetter) *AnimationTarget {
	return obj.baseAnimationTarget()
}

// CallbackAnimationTargetOverrider contains methods that are overridable.
type CallbackAnimationTargetOverrider interface {
}

// CallbackAnimationTarget: animationtarget that calls a given callback during
// the animation.
type CallbackAnimationTarget struct {
	_ [0]func() // equal guard
	AnimationTarget
}

var (
	_ AnimationTargetter = (*CallbackAnimationTarget)(nil)
)

func classInitCallbackAnimationTargetter(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapCallbackAnimationTarget(obj *externglib.Object) *CallbackAnimationTarget {
	return &CallbackAnimationTarget{
		AnimationTarget: AnimationTarget{
			Object: obj,
		},
	}
}

func marshalCallbackAnimationTarget(p uintptr) (interface{}, error) {
	return wrapCallbackAnimationTarget(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewCallbackAnimationTarget creates a new AdwAnimationTarget that calls the
// given callback during the animation.
//
// The function takes the following parameters:
//
//    - callback (optional) to call.
//
// The function returns the following values:
//
//    - callbackAnimationTarget: newly created callback target.
//
func NewCallbackAnimationTarget(callback AnimationTargetFunc) *CallbackAnimationTarget {
	var _arg1 C.AdwAnimationTargetFunc // out
	var _arg2 C.gpointer
	var _arg3 C.GDestroyNotify
	var _cret *C.AdwAnimationTarget // in

	if callback != nil {
		_arg1 = (*[0]byte)(C._gotk4_adw1_AnimationTargetFunc)
		_arg2 = C.gpointer(gbox.Assign(callback))
		_arg3 = (C.GDestroyNotify)((*[0]byte)(C.callbackDelete))
	}

	_cret = C.adw_callback_animation_target_new(_arg1, _arg2, _arg3)
	runtime.KeepAlive(callback)

	var _callbackAnimationTarget *CallbackAnimationTarget // out

	_callbackAnimationTarget = wrapCallbackAnimationTarget(externglib.AssumeOwnership(unsafe.Pointer(_cret)))

	return _callbackAnimationTarget
}
