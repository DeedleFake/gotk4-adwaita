// Code generated by girgen. DO NOT EDIT.

package adw

import (
	"runtime"
	"unsafe"

	externglib "github.com/diamondburned/gotk4/pkg/core/glib"
	"github.com/diamondburned/gotk4/pkg/gtk/v4"
)

// #include <stdlib.h>
// #include <adwaita.h>
// #include <glib-object.h>
import "C"

// glib.Type values for adw-preferences-group.go.
var GTypePreferencesGroup = externglib.Type(C.adw_preferences_group_get_type())

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: GTypePreferencesGroup, F: marshalPreferencesGroup},
	})
}

// PreferencesGroupOverrider contains methods that are overridable.
type PreferencesGroupOverrider interface {
}

// PreferencesGroup: group of preference rows.
//
// <picture> <source srcset="preferences-group-dark.png"
// media="(prefers-color-scheme: dark)"> <img src="preferences-group.png"
// alt="preferences-group"> </picture>
//
// An AdwPreferencesGroup represents a group or tightly related preferences,
// which in turn are represented by preferencesrow.
//
// To summarize the role of the preferences it gathers, a group can have both a
// title and a description. The title will be used by preferenceswindow to let
// the user look for a preference.
//
//
// AdwPreferencesGroup as GtkBuildable
//
// The AdwPreferencesGroup implementation of the gtk.Buildable interface will
// add preferencesrows to the group's list. If a child is not a preferencesrow
// the child is added to a box below the list.
//
//
// CSS nodes
//
// AdwPreferencesGroup has a single CSS node with name preferencesgroup.
//
//
// Accessibility
//
// AdwPreferencesGroup uses the GTK_ACCESSIBLE_ROLE_GROUP role.
type PreferencesGroup struct {
	_ [0]func() // equal guard
	gtk.Widget
}

var (
	_ gtk.Widgetter = (*PreferencesGroup)(nil)
)

func classInitPreferencesGrouper(gclassPtr, data C.gpointer) {
	C.g_type_class_add_private(gclassPtr, C.gsize(unsafe.Sizeof(uintptr(0))))

	goffset := C.g_type_class_get_instance_private_offset(gclassPtr)
	*(*C.gpointer)(unsafe.Add(unsafe.Pointer(gclassPtr), goffset)) = data

}

func wrapPreferencesGroup(obj *externglib.Object) *PreferencesGroup {
	return &PreferencesGroup{
		Widget: gtk.Widget{
			InitiallyUnowned: externglib.InitiallyUnowned{
				Object: obj,
			},
			Object: obj,
			Accessible: gtk.Accessible{
				Object: obj,
			},
			Buildable: gtk.Buildable{
				Object: obj,
			},
			ConstraintTarget: gtk.ConstraintTarget{
				Object: obj,
			},
		},
	}
}

func marshalPreferencesGroup(p uintptr) (interface{}, error) {
	return wrapPreferencesGroup(externglib.ValueFromNative(unsafe.Pointer(p)).Object()), nil
}

// NewPreferencesGroup creates a new AdwPreferencesGroup.
//
// The function returns the following values:
//
//    - preferencesGroup: newly created AdwPreferencesGroup.
//
func NewPreferencesGroup() *PreferencesGroup {
	var _cret *C.GtkWidget // in

	_cret = C.adw_preferences_group_new()

	var _preferencesGroup *PreferencesGroup // out

	_preferencesGroup = wrapPreferencesGroup(externglib.Take(unsafe.Pointer(_cret)))

	return _preferencesGroup
}

// Add adds a child to self.
//
// The function takes the following parameters:
//
//    - child: widget to add.
//
func (self *PreferencesGroup) Add(child gtk.Widgetter) {
	var _arg0 *C.AdwPreferencesGroup // out
	var _arg1 *C.GtkWidget           // out

	_arg0 = (*C.AdwPreferencesGroup)(unsafe.Pointer(externglib.InternObject(self).Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(externglib.InternObject(child).Native()))

	C.adw_preferences_group_add(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(child)
}

// Description gets the description of self.
//
// The function returns the following values:
//
//    - utf8 (optional): description of self.
//
func (self *PreferencesGroup) Description() string {
	var _arg0 *C.AdwPreferencesGroup // out
	var _cret *C.char                // in

	_arg0 = (*C.AdwPreferencesGroup)(unsafe.Pointer(externglib.InternObject(self).Native()))

	_cret = C.adw_preferences_group_get_description(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	if _cret != nil {
		_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))
	}

	return _utf8
}

// Title gets the title of self.
//
// The function returns the following values:
//
//    - utf8: title of self.
//
func (self *PreferencesGroup) Title() string {
	var _arg0 *C.AdwPreferencesGroup // out
	var _cret *C.char                // in

	_arg0 = (*C.AdwPreferencesGroup)(unsafe.Pointer(externglib.InternObject(self).Native()))

	_cret = C.adw_preferences_group_get_title(_arg0)
	runtime.KeepAlive(self)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Remove removes a child from self.
//
// The function takes the following parameters:
//
//    - child to remove.
//
func (self *PreferencesGroup) Remove(child gtk.Widgetter) {
	var _arg0 *C.AdwPreferencesGroup // out
	var _arg1 *C.GtkWidget           // out

	_arg0 = (*C.AdwPreferencesGroup)(unsafe.Pointer(externglib.InternObject(self).Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(externglib.InternObject(child).Native()))

	C.adw_preferences_group_remove(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(child)
}

// SetDescription sets the description for self.
//
// The function takes the following parameters:
//
//    - description (optional): description.
//
func (self *PreferencesGroup) SetDescription(description string) {
	var _arg0 *C.AdwPreferencesGroup // out
	var _arg1 *C.char                // out

	_arg0 = (*C.AdwPreferencesGroup)(unsafe.Pointer(externglib.InternObject(self).Native()))
	if description != "" {
		_arg1 = (*C.char)(unsafe.Pointer(C.CString(description)))
		defer C.free(unsafe.Pointer(_arg1))
	}

	C.adw_preferences_group_set_description(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(description)
}

// SetTitle sets the title for self.
//
// The function takes the following parameters:
//
//    - title: title.
//
func (self *PreferencesGroup) SetTitle(title string) {
	var _arg0 *C.AdwPreferencesGroup // out
	var _arg1 *C.char                // out

	_arg0 = (*C.AdwPreferencesGroup)(unsafe.Pointer(externglib.InternObject(self).Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(title)))
	defer C.free(unsafe.Pointer(_arg1))

	C.adw_preferences_group_set_title(_arg0, _arg1)
	runtime.KeepAlive(self)
	runtime.KeepAlive(title)
}
