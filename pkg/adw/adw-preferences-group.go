// Code generated by girgen. DO NOT EDIT.

package adw

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/gtk/v4"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: libadwaita-1
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <adwaita.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.adw_preferences_group_get_type()), F: marshalPreferencesGrouper},
	})
}

type PreferencesGroup struct {
	gtk.Widget
}

func wrapPreferencesGroup(obj *externglib.Object) *PreferencesGroup {
	return &PreferencesGroup{
		Widget: gtk.Widget{
			InitiallyUnowned: externglib.InitiallyUnowned{
				Object: obj,
			},
			Accessible: gtk.Accessible{
				Object: obj,
			},
			Buildable: gtk.Buildable{
				Object: obj,
			},
			ConstraintTarget: gtk.ConstraintTarget{
				Object: obj,
			},
			Object: obj,
		},
	}
}

func marshalPreferencesGrouper(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapPreferencesGroup(obj), nil
}

// NewPreferencesGroup creates a new PreferencesGroup.
func NewPreferencesGroup() *PreferencesGroup {
	var _cret *C.GtkWidget // in

	_cret = C.adw_preferences_group_new()

	var _preferencesGroup *PreferencesGroup // out

	_preferencesGroup = wrapPreferencesGroup(externglib.Take(unsafe.Pointer(_cret)))

	return _preferencesGroup
}

func (self *PreferencesGroup) Add(child gtk.Widgetter) {
	var _arg0 *C.AdwPreferencesGroup // out
	var _arg1 *C.GtkWidget           // out

	_arg0 = (*C.AdwPreferencesGroup)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(child.Native()))

	C.adw_preferences_group_add(_arg0, _arg1)
}

func (self *PreferencesGroup) Description() string {
	var _arg0 *C.AdwPreferencesGroup // out
	var _cret *C.char                // in

	_arg0 = (*C.AdwPreferencesGroup)(unsafe.Pointer(self.Native()))

	_cret = C.adw_preferences_group_get_description(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Title gets the title of self.
func (self *PreferencesGroup) Title() string {
	var _arg0 *C.AdwPreferencesGroup // out
	var _cret *C.char                // in

	_arg0 = (*C.AdwPreferencesGroup)(unsafe.Pointer(self.Native()))

	_cret = C.adw_preferences_group_get_title(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

func (self *PreferencesGroup) Remove(child gtk.Widgetter) {
	var _arg0 *C.AdwPreferencesGroup // out
	var _arg1 *C.GtkWidget           // out

	_arg0 = (*C.AdwPreferencesGroup)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer(child.Native()))

	C.adw_preferences_group_remove(_arg0, _arg1)
}

// SetDescription sets the description for self.
func (self *PreferencesGroup) SetDescription(description string) {
	var _arg0 *C.AdwPreferencesGroup // out
	var _arg1 *C.char                // out

	_arg0 = (*C.AdwPreferencesGroup)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(description)))
	defer C.free(unsafe.Pointer(_arg1))

	C.adw_preferences_group_set_description(_arg0, _arg1)
}

// SetTitle sets the title for self.
func (self *PreferencesGroup) SetTitle(title string) {
	var _arg0 *C.AdwPreferencesGroup // out
	var _arg1 *C.char                // out

	_arg0 = (*C.AdwPreferencesGroup)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.char)(unsafe.Pointer(C.CString(title)))
	defer C.free(unsafe.Pointer(_arg1))

	C.adw_preferences_group_set_title(_arg0, _arg1)
}
