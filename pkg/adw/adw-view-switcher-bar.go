// Code generated by girgen. DO NOT EDIT.

package adw

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gtk/v4"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: libadwaita-1
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <adwaita.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.adw_view_switcher_bar_get_type()), F: marshalViewSwitcherBarrer},
	})
}

type ViewSwitcherBar struct {
	gtk.Widget
}

var _ gextras.Nativer = (*ViewSwitcherBar)(nil)

func wrapViewSwitcherBar(obj *externglib.Object) *ViewSwitcherBar {
	return &ViewSwitcherBar{
		Widget: gtk.Widget{
			InitiallyUnowned: externglib.InitiallyUnowned{
				Object: obj,
			},
			Accessible: gtk.Accessible{
				Object: obj,
			},
			Buildable: gtk.Buildable{
				Object: obj,
			},
			ConstraintTarget: gtk.ConstraintTarget{
				Object: obj,
			},
		},
	}
}

func marshalViewSwitcherBarrer(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapViewSwitcherBar(obj), nil
}

// NewViewSwitcherBar creates a new ViewSwitcherBar widget.
func NewViewSwitcherBar() *ViewSwitcherBar {
	var _cret *C.GtkWidget // in

	_cret = C.adw_view_switcher_bar_new()

	var _viewSwitcherBar *ViewSwitcherBar // out

	_viewSwitcherBar = wrapViewSwitcherBar(externglib.Take(unsafe.Pointer(_cret)))

	return _viewSwitcherBar
}

// Policy gets the policy of self.
func (self *ViewSwitcherBar) Policy() ViewSwitcherPolicy {
	var _arg0 *C.AdwViewSwitcherBar   // out
	var _cret C.AdwViewSwitcherPolicy // in

	_arg0 = (*C.AdwViewSwitcherBar)(unsafe.Pointer(self.Native()))

	_cret = C.adw_view_switcher_bar_get_policy(_arg0)

	var _viewSwitcherPolicy ViewSwitcherPolicy // out

	_viewSwitcherPolicy = ViewSwitcherPolicy(_cret)

	return _viewSwitcherPolicy
}

// Reveal gets whether self should be revealed or not.
func (self *ViewSwitcherBar) Reveal() bool {
	var _arg0 *C.AdwViewSwitcherBar // out
	var _cret C.gboolean            // in

	_arg0 = (*C.AdwViewSwitcherBar)(unsafe.Pointer(self.Native()))

	_cret = C.adw_view_switcher_bar_get_reveal(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// Stack: get the Stack being controlled by the ViewSwitcher.
func (self *ViewSwitcherBar) Stack() *gtk.Stack {
	var _arg0 *C.AdwViewSwitcherBar // out
	var _cret *C.GtkStack           // in

	_arg0 = (*C.AdwViewSwitcherBar)(unsafe.Pointer(self.Native()))

	_cret = C.adw_view_switcher_bar_get_stack(_arg0)

	var _stack *gtk.Stack // out

	{
		obj := externglib.Take(unsafe.Pointer(_cret))
		_stack = &gtk.Stack{
			Widget: gtk.Widget{
				InitiallyUnowned: externglib.InitiallyUnowned{
					Object: obj,
				},
				Accessible: gtk.Accessible{
					Object: obj,
				},
				Buildable: gtk.Buildable{
					Object: obj,
				},
				ConstraintTarget: gtk.ConstraintTarget{
					Object: obj,
				},
			},
		}
	}

	return _stack
}

// SetPolicy sets the policy of self.
func (self *ViewSwitcherBar) SetPolicy(policy ViewSwitcherPolicy) {
	var _arg0 *C.AdwViewSwitcherBar   // out
	var _arg1 C.AdwViewSwitcherPolicy // out

	_arg0 = (*C.AdwViewSwitcherBar)(unsafe.Pointer(self.Native()))
	_arg1 = C.AdwViewSwitcherPolicy(policy)

	C.adw_view_switcher_bar_set_policy(_arg0, _arg1)
}

// SetReveal sets whether self should be revealed or not.
func (self *ViewSwitcherBar) SetReveal(reveal bool) {
	var _arg0 *C.AdwViewSwitcherBar // out
	var _arg1 C.gboolean            // out

	_arg0 = (*C.AdwViewSwitcherBar)(unsafe.Pointer(self.Native()))
	if reveal {
		_arg1 = C.TRUE
	}

	C.adw_view_switcher_bar_set_reveal(_arg0, _arg1)
}

// SetStack sets the Stack to control.
func (self *ViewSwitcherBar) SetStack(stack *gtk.Stack) {
	var _arg0 *C.AdwViewSwitcherBar // out
	var _arg1 *C.GtkStack           // out

	_arg0 = (*C.AdwViewSwitcherBar)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.GtkStack)(unsafe.Pointer(stack.Native()))

	C.adw_view_switcher_bar_set_stack(_arg0, _arg1)
}
