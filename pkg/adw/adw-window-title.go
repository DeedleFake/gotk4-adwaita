// Code generated by girgen. DO NOT EDIT.

package adw

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/gtk/v4"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: libadwaita-1
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <adwaita.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.adw_window_title_get_type()), F: marshalWindowTitler},
	})
}

type WindowTitle struct {
	gtk.Widget
}

func wrapWindowTitle(obj *externglib.Object) *WindowTitle {
	return &WindowTitle{
		Widget: gtk.Widget{
			InitiallyUnowned: externglib.InitiallyUnowned{
				Object: obj,
			},
			Accessible: gtk.Accessible{
				Object: obj,
			},
			Buildable: gtk.Buildable{
				Object: obj,
			},
			ConstraintTarget: gtk.ConstraintTarget{
				Object: obj,
			},
			Object: obj,
		},
	}
}

func marshalWindowTitler(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapWindowTitle(obj), nil
}

// NewWindowTitle creates a new WindowTitle widget.
func NewWindowTitle(title string, subtitle string) *WindowTitle {
	var _arg1 *C.char      // out
	var _arg2 *C.char      // out
	var _cret *C.GtkWidget // in

	if title != "" {
		_arg1 = (*C.char)(unsafe.Pointer(C.CString(title)))
		defer C.free(unsafe.Pointer(_arg1))
	}
	if subtitle != "" {
		_arg2 = (*C.char)(unsafe.Pointer(C.CString(subtitle)))
		defer C.free(unsafe.Pointer(_arg2))
	}

	_cret = C.adw_window_title_new(_arg1, _arg2)

	var _windowTitle *WindowTitle // out

	_windowTitle = wrapWindowTitle(externglib.Take(unsafe.Pointer(_cret)))

	return _windowTitle
}

// Subtitle gets the subtitle of self. See adw_window_title_set_subtitle().
func (self *WindowTitle) Subtitle() string {
	var _arg0 *C.AdwWindowTitle // out
	var _cret *C.char           // in

	_arg0 = (*C.AdwWindowTitle)(unsafe.Pointer(self.Native()))

	_cret = C.adw_window_title_get_subtitle(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// Title gets the title of self. See adw_window_title_set_title().
func (self *WindowTitle) Title() string {
	var _arg0 *C.AdwWindowTitle // out
	var _cret *C.char           // in

	_arg0 = (*C.AdwWindowTitle)(unsafe.Pointer(self.Native()))

	_cret = C.adw_window_title_get_title(_arg0)

	var _utf8 string // out

	_utf8 = C.GoString((*C.gchar)(unsafe.Pointer(_cret)))

	return _utf8
}

// SetSubtitle sets the subtitle of self.
//
// The subtitle should give a user additional details.
func (self *WindowTitle) SetSubtitle(subtitle string) {
	var _arg0 *C.AdwWindowTitle // out
	var _arg1 *C.char           // out

	_arg0 = (*C.AdwWindowTitle)(unsafe.Pointer(self.Native()))
	if subtitle != "" {
		_arg1 = (*C.char)(unsafe.Pointer(C.CString(subtitle)))
		defer C.free(unsafe.Pointer(_arg1))
	}

	C.adw_window_title_set_subtitle(_arg0, _arg1)
}

// SetTitle sets the title of self.
//
// The title typically identifies the current view or content item, and
// generally does not use the application name.
func (self *WindowTitle) SetTitle(title string) {
	var _arg0 *C.AdwWindowTitle // out
	var _arg1 *C.char           // out

	_arg0 = (*C.AdwWindowTitle)(unsafe.Pointer(self.Native()))
	if title != "" {
		_arg1 = (*C.char)(unsafe.Pointer(C.CString(title)))
		defer C.free(unsafe.Pointer(_arg1))
	}

	C.adw_window_title_set_title(_arg0, _arg1)
}
