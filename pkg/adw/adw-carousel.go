// Code generated by girgen. DO NOT EDIT.

package adw

import (
	"unsafe"

	"github.com/diamondburned/gotk4/pkg/core/gextras"
	"github.com/diamondburned/gotk4/pkg/gtk/v4"
	externglib "github.com/gotk3/gotk3/glib"
)

// #cgo pkg-config: libadwaita-1
// #cgo CFLAGS: -Wno-deprecated-declarations
// #include <adwaita.h>
// #include <glib-object.h>
import "C"

func init() {
	externglib.RegisterGValueMarshalers([]externglib.TypeMarshaler{
		{T: externglib.Type(C.adw_carousel_get_type()), F: marshalCarouseller},
	})
}

type Carousel struct {
	gtk.Widget

	Swipeable
	gtk.Orientable
}

var _ gextras.Nativer = (*Carousel)(nil)

func wrapCarousel(obj *externglib.Object) *Carousel {
	return &Carousel{
		Widget: gtk.Widget{
			InitiallyUnowned: externglib.InitiallyUnowned{
				Object: obj,
			},
			Accessible: gtk.Accessible{
				Object: obj,
			},
			Buildable: gtk.Buildable{
				Object: obj,
			},
			ConstraintTarget: gtk.ConstraintTarget{
				Object: obj,
			},
		},
		Swipeable: Swipeable{
			Widget: gtk.Widget{
				InitiallyUnowned: externglib.InitiallyUnowned{
					Object: obj,
				},
				Accessible: gtk.Accessible{
					Object: obj,
				},
				Buildable: gtk.Buildable{
					Object: obj,
				},
				ConstraintTarget: gtk.ConstraintTarget{
					Object: obj,
				},
			},
		},
		Orientable: gtk.Orientable{
			Object: obj,
		},
	}
}

func marshalCarouseller(p uintptr) (interface{}, error) {
	val := C.g_value_get_object((*C.GValue)(unsafe.Pointer(p)))
	obj := externglib.Take(unsafe.Pointer(val))
	return wrapCarousel(obj), nil
}

// NewCarousel: create a new Carousel widget.
func NewCarousel() *Carousel {
	var _cret *C.GtkWidget // in

	_cret = C.adw_carousel_new()

	var _carousel *Carousel // out

	_carousel = wrapCarousel(externglib.Take(unsafe.Pointer(_cret)))

	return _carousel
}

// Native implements gextras.Nativer. It returns the underlying GObject
// field.
func (v *Carousel) Native() uintptr {
	return v.Widget.InitiallyUnowned.Object.Native()
}

// Append appends child to self
func (self *Carousel) Append(child gtk.Widgetter) {
	var _arg0 *C.AdwCarousel // out
	var _arg1 *C.GtkWidget   // out

	_arg0 = (*C.AdwCarousel)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer((child).(gextras.Nativer).Native()))

	C.adw_carousel_append(_arg0, _arg1)
}

// AllowLongSwipes: whether to allow swiping for more than one page at a time.
// If the value is FALSE, each swipe can only move to the adjacent pages.
func (self *Carousel) AllowLongSwipes() bool {
	var _arg0 *C.AdwCarousel // out
	var _cret C.gboolean     // in

	_arg0 = (*C.AdwCarousel)(unsafe.Pointer(self.Native()))

	_cret = C.adw_carousel_get_allow_long_swipes(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// AllowMouseDrag sets whether self can be dragged with mouse pointer
func (self *Carousel) AllowMouseDrag() bool {
	var _arg0 *C.AdwCarousel // out
	var _cret C.gboolean     // in

	_arg0 = (*C.AdwCarousel)(unsafe.Pointer(self.Native()))

	_cret = C.adw_carousel_get_allow_mouse_drag(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// AllowScrollWheel gets whether self will respond to scroll wheel events.
func (self *Carousel) AllowScrollWheel() bool {
	var _arg0 *C.AdwCarousel // out
	var _cret C.gboolean     // in

	_arg0 = (*C.AdwCarousel)(unsafe.Pointer(self.Native()))

	_cret = C.adw_carousel_get_allow_scroll_wheel(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// AnimationDuration gets animation duration used by adw_carousel_scroll_to().
func (self *Carousel) AnimationDuration() uint {
	var _arg0 *C.AdwCarousel // out
	var _cret C.guint        // in

	_arg0 = (*C.AdwCarousel)(unsafe.Pointer(self.Native()))

	_cret = C.adw_carousel_get_animation_duration(_arg0)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// Interactive gets whether self can be navigated.
func (self *Carousel) Interactive() bool {
	var _arg0 *C.AdwCarousel // out
	var _cret C.gboolean     // in

	_arg0 = (*C.AdwCarousel)(unsafe.Pointer(self.Native()))

	_cret = C.adw_carousel_get_interactive(_arg0)

	var _ok bool // out

	if _cret != 0 {
		_ok = true
	}

	return _ok
}

// NPages gets the number of pages in self.
func (self *Carousel) NPages() uint {
	var _arg0 *C.AdwCarousel // out
	var _cret C.guint        // in

	_arg0 = (*C.AdwCarousel)(unsafe.Pointer(self.Native()))

	_cret = C.adw_carousel_get_n_pages(_arg0)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// NthPage gets the page at position n.
func (self *Carousel) NthPage(n uint) gtk.Widgetter {
	var _arg0 *C.AdwCarousel // out
	var _arg1 C.guint        // out
	var _cret *C.GtkWidget   // in

	_arg0 = (*C.AdwCarousel)(unsafe.Pointer(self.Native()))
	_arg1 = C.guint(n)

	_cret = C.adw_carousel_get_nth_page(_arg0, _arg1)

	var _widget gtk.Widgetter // out

	_widget = (gextras.CastObject(externglib.Take(unsafe.Pointer(_cret)))).(gtk.Widgetter)

	return _widget
}

// Position gets current scroll position in self. It's unitless, 1 matches 1
// page.
func (self *Carousel) Position() float64 {
	var _arg0 *C.AdwCarousel // out
	var _cret C.double       // in

	_arg0 = (*C.AdwCarousel)(unsafe.Pointer(self.Native()))

	_cret = C.adw_carousel_get_position(_arg0)

	var _gdouble float64 // out

	_gdouble = float64(_cret)

	return _gdouble
}

// RevealDuration gets duration of the animation used when adding or removing
// pages in milliseconds.
func (self *Carousel) RevealDuration() uint {
	var _arg0 *C.AdwCarousel // out
	var _cret C.guint        // in

	_arg0 = (*C.AdwCarousel)(unsafe.Pointer(self.Native()))

	_cret = C.adw_carousel_get_reveal_duration(_arg0)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// Spacing gets spacing between pages in pixels.
func (self *Carousel) Spacing() uint {
	var _arg0 *C.AdwCarousel // out
	var _cret C.guint        // in

	_arg0 = (*C.AdwCarousel)(unsafe.Pointer(self.Native()))

	_cret = C.adw_carousel_get_spacing(_arg0)

	var _guint uint // out

	_guint = uint(_cret)

	return _guint
}

// Insert inserts child into self at position position.
//
// If position is -1, or larger than the number of pages, child will be appended
// to the end.
func (self *Carousel) Insert(child gtk.Widgetter, position int) {
	var _arg0 *C.AdwCarousel // out
	var _arg1 *C.GtkWidget   // out
	var _arg2 C.int          // out

	_arg0 = (*C.AdwCarousel)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer((child).(gextras.Nativer).Native()))
	_arg2 = C.int(position)

	C.adw_carousel_insert(_arg0, _arg1, _arg2)
}

// Prepend prepends child to self
func (self *Carousel) Prepend(child gtk.Widgetter) {
	var _arg0 *C.AdwCarousel // out
	var _arg1 *C.GtkWidget   // out

	_arg0 = (*C.AdwCarousel)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer((child).(gextras.Nativer).Native()))

	C.adw_carousel_prepend(_arg0, _arg1)
}

// Remove removes child from self
func (self *Carousel) Remove(child gtk.Widgetter) {
	var _arg0 *C.AdwCarousel // out
	var _arg1 *C.GtkWidget   // out

	_arg0 = (*C.AdwCarousel)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer((child).(gextras.Nativer).Native()))

	C.adw_carousel_remove(_arg0, _arg1)
}

// Reorder moves child into position position.
//
// If position is -1, or larger than the number of pages, child will be moved to
// the end.
func (self *Carousel) Reorder(child gtk.Widgetter, position int) {
	var _arg0 *C.AdwCarousel // out
	var _arg1 *C.GtkWidget   // out
	var _arg2 C.int          // out

	_arg0 = (*C.AdwCarousel)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer((child).(gextras.Nativer).Native()))
	_arg2 = C.int(position)

	C.adw_carousel_reorder(_arg0, _arg1, _arg2)
}

// ScrollTo scrolls to widget position with an animation.
// Carousel:animation-duration property can be used for controlling the
// duration.
func (self *Carousel) ScrollTo(widget gtk.Widgetter) {
	var _arg0 *C.AdwCarousel // out
	var _arg1 *C.GtkWidget   // out

	_arg0 = (*C.AdwCarousel)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer((widget).(gextras.Nativer).Native()))

	C.adw_carousel_scroll_to(_arg0, _arg1)
}

// ScrollToFull scrolls to widget position with an animation.
func (self *Carousel) ScrollToFull(widget gtk.Widgetter, duration int64) {
	var _arg0 *C.AdwCarousel // out
	var _arg1 *C.GtkWidget   // out
	var _arg2 C.gint64       // out

	_arg0 = (*C.AdwCarousel)(unsafe.Pointer(self.Native()))
	_arg1 = (*C.GtkWidget)(unsafe.Pointer((widget).(gextras.Nativer).Native()))
	_arg2 = C.gint64(duration)

	C.adw_carousel_scroll_to_full(_arg0, _arg1, _arg2)
}

// SetAllowLongSwipes sets whether to allow swiping for more than one page at a
// time. If the value is FALSE, each swipe can only move to the adjacent pages.
func (self *Carousel) SetAllowLongSwipes(allowLongSwipes bool) {
	var _arg0 *C.AdwCarousel // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.AdwCarousel)(unsafe.Pointer(self.Native()))
	if allowLongSwipes {
		_arg1 = C.TRUE
	}

	C.adw_carousel_set_allow_long_swipes(_arg0, _arg1)
}

// SetAllowMouseDrag sets whether self can be dragged with mouse pointer. If
// allow_mouse_drag is FALSE, dragging is only available on touch.
func (self *Carousel) SetAllowMouseDrag(allowMouseDrag bool) {
	var _arg0 *C.AdwCarousel // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.AdwCarousel)(unsafe.Pointer(self.Native()))
	if allowMouseDrag {
		_arg1 = C.TRUE
	}

	C.adw_carousel_set_allow_mouse_drag(_arg0, _arg1)
}

// SetAllowScrollWheel sets whether self will respond to scroll wheel events. If
// the value is FALSE, wheel events will be ignored.
func (self *Carousel) SetAllowScrollWheel(allowScrollWheel bool) {
	var _arg0 *C.AdwCarousel // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.AdwCarousel)(unsafe.Pointer(self.Native()))
	if allowScrollWheel {
		_arg1 = C.TRUE
	}

	C.adw_carousel_set_allow_scroll_wheel(_arg0, _arg1)
}

// SetAnimationDuration sets animation duration used by
// adw_carousel_scroll_to().
func (self *Carousel) SetAnimationDuration(duration uint) {
	var _arg0 *C.AdwCarousel // out
	var _arg1 C.guint        // out

	_arg0 = (*C.AdwCarousel)(unsafe.Pointer(self.Native()))
	_arg1 = C.guint(duration)

	C.adw_carousel_set_animation_duration(_arg0, _arg1)
}

// SetInteractive sets whether self can be navigated. This can be used to
// temporarily disable a Carousel to only allow swiping in a certain state.
func (self *Carousel) SetInteractive(interactive bool) {
	var _arg0 *C.AdwCarousel // out
	var _arg1 C.gboolean     // out

	_arg0 = (*C.AdwCarousel)(unsafe.Pointer(self.Native()))
	if interactive {
		_arg1 = C.TRUE
	}

	C.adw_carousel_set_interactive(_arg0, _arg1)
}

// SetRevealDuration sets duration of the animation used when adding or removing
// pages in milliseconds.
func (self *Carousel) SetRevealDuration(revealDuration uint) {
	var _arg0 *C.AdwCarousel // out
	var _arg1 C.guint        // out

	_arg0 = (*C.AdwCarousel)(unsafe.Pointer(self.Native()))
	_arg1 = C.guint(revealDuration)

	C.adw_carousel_set_reveal_duration(_arg0, _arg1)
}

// SetSpacing sets spacing between pages in pixels.
func (self *Carousel) SetSpacing(spacing uint) {
	var _arg0 *C.AdwCarousel // out
	var _arg1 C.guint        // out

	_arg0 = (*C.AdwCarousel)(unsafe.Pointer(self.Native()))
	_arg1 = C.guint(spacing)

	C.adw_carousel_set_spacing(_arg0, _arg1)
}
